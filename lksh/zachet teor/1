Способы написания динамического программирования: ДП с просмотром вперед, ДП с просмотром назад и рекурсия с запоминанием. Особенности каждого метода.

1. С просмотром назад
	Вычисляя значение динамики текущего состояния мы смотрим на значения предыдущих состояний, они уже должны быть вычисленны. Этот способ мы используем, когда можно легко вычислить все предыдущие состояния, от которых зависит текущее.
2. С просмотром вперед
	Приходя в какое-то состояние, оно уже должно быть вычисленно. Из вычисленного состояния мы дополняем значения состояний, которые зависят от текущего. Таким образом ответ для каждого состояния вычисляется постепенно. Мы используем этот метод, когда мы можем легко определить все состояния, которые зависят от текущего. Выставление начальных значений может отличаться от начальных значений для первого метода.
3. Рекурсия с запоминанием
	Этот метод может быть самым удобным в использовании. Мы пишем рекурсивную функцию, которая напрямую выполняет все действия с рекурсивными вызовами. При этом для вызова мы проверяем, если это значение уже было вычисленно, мы не вычисляем его повторно, а возвращаем сразу. Таким образом реально для каждого состояния динамика будет вычислятся один раз. Начальные значения можно либо выставить константами в массиве запоминания, или же поставить условия в функции. Этот метод, хоть и удобен, но может работать несколько медленее, так как есть множественные вызовы функции. Так же могут быть проблемы с переполнением стека.

Примеры на числах фибоначи:
1.
a[0] = a[1] = 1;
for (int i = 2; i <= n; i++)
	a[i] = a[i - 1] + a[i - 2];
2.
a[0] = 1;
for (int i = 0; i <= n; i++) {
	if (i + 1 <= n)
		a[i + 1] += a[i];
	if (i + 2 <= n)
		a[i + 2] += a[i];
}

3.
was[0] = was[1] = fib[0] = fib[1] = 1;
int f(int n) {
	if (was[n])return fib[n];
	was[n] = 1;
	return fib[n] = f(n - 1) + f(n - 2);
}
