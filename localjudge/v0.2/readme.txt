Project: Local Judge System

Required features: Judge n contestants on m tasks with set time and memory limits using runguard

Components: test.sh - test one task and one contestant in work directory 
			testgroup.sh - test every contestant on every task found
			testcustom.sh - inputs list of problems and list of contestants to test from standart input
			gencustom.sh - outputs information for testcustom.sh
			clear.sh - delete everything that doesn't belong to local judge (be carefull)
			maketable - create html table with name given as argument
			run - binary of runguard, source code is named "runguard.c"
			defaultoptions.txt - defaul time and memory limits and standart i/o use
			options.txt - change default time and memory limits and standart i/o use
			report.txt - full backtrack of every run

Defaults: 	Limits: 	TL : 2s
						ML : 64mb
			Pathes:		tests :			./tests/
						Contestants : 	./submits/
						for every task :./tests/$taskname/??{|.a}
						solutions :		./submits/$taskname/$taskname{.cpp|pas}

TODOs:		maketable (cpp) [done]
			test with stdin/stdout [done][tested]
			custom timelimits [done][tested]
			custom test:	custom problem [done]
							custom participant [done]
							custom problem and custom participant [done]

defaultoptions.txt and options.txt:
			first float number is time limit
			secont integer number is memory limit in megabytes
			third boolean is use of standart i/o

custom test:
			testcustom.sh inputs n - number of problems and list of problems name, then m - number of participants and list of their names, every thing should be on single line

Usage of maketable:
			./maketable "Contest name" lang
			lang options: RUS/ENG
			takes in stdin results of contest generated by testgroup.sh/testcustom.sh
			creates html table in same folder

			Example of usage: ./testgroup.sh | ./maketable "Spring Contest KTL 2011" ENG


